{"./":{"url":"./","title":"前言","keywords":"","body":"前言 如需本文档源码,请访问Github 源码 网关介绍 本网关为工业物联网采集网关,专业采集各种主流 CNC, PLC, 目前支持 Fanuc (发那科), Siemens (西门子) CNC, Mitsubishi (三菱) CNC, KND (凯恩蒂), GSK (广数) CNC, Heidenhain (海德汉), Citizen (西铁城), Brother (兄弟), Siemens (西门子) S7, Mitsubishi (三菱) MC, Omron (欧姆龙) Fins, Modbus TCP/RTU 等协议. 本网关程序使用 C++ 开发, 支持 ARM, X86 等各种CPU架构的Linux系统,可构建至中央服务器统一采集厂房所有联网设备,也可以构建于嵌入式主机, 一对一采集单个设备,网关对外提供多种数据输出方式,包括 MQTT , HTTP, Socket 等通讯协议,支持对接各大云平台,包括 Thingsboard, 联通 Telit, 移动 OneNet, 百度天工, 航天云网等. 本网关带有 VPN 服务,可以搭配巫云 VPN 服务,可以提供高效安全的 VPN 服务,可以远程上下载程序锁机等. 本文档基于本公司配套硬件设施,其他硬件仅网络配置界面不同 "},"hardware.html":{"url":"hardware.html","title":"硬件介绍","keywords":"","body":"硬件 本网关提供两个有线网口,可选型号支持WiFi和2G/3G/4G,同时提供一个485接口,电源为宽压电路,支持9-30V输入电压. 基本参数 名称 标配参数 描述 尺寸 110.00mm*90.00mm*35.00mm 长*宽*高 CPU AM3352BZCZD60@600MHz ARM Cortex-A8 架构，工业级温宽 内存 256MB DDR3 工业级温宽：-40℃ ~ +85℃ NandFlash 256MB SLC NandFlash 工业级温宽：-40℃ ~ +85℃ 有线网络 网关的两个网口,分别为NET0与NET1默认地址为 NET0:192.168.0.15/24 NET1:10.10.80.15/24 无线网络 无线网络仅支持2.4G网络,不支持隐藏SSID,无线网络需要登陆之后在页面配置,使用WiFi网络需要检查天线是否正常 4G网络 4G网络不需要配置,插入SIM卡即可使用,插入SIM卡必须断电重启设备,,使用4G网络需要检查天线是否正常 RS485 485芯片为MAX485,最多支持接入32个485网络设备 "},"ui/":{"url":"ui/","title":"管理界面","keywords":"","body":"管理界面 首次使用管理界面需要先确认电脑与网关的网络硬件连接正常,依据连接的网络接口不同和电脑设置的ip,可选择以下地址登陆 http://192.168.0.15:9080 http://10.10.80.15:9080 http://192.168.253.254:9080 http://192.168.254.254:9080 此外,默认情况下VPN是连接的,如果插入4G卡使得网关拥有外网,也可以通过VPN管理后台的地址登陆 "},"ui/login.html":{"url":"ui/login.html","title":"登陆","keywords":"","body":"登陆 用户名为admin,默认密码为password,建议登陆后修改密码 "},"ui/info.html":{"url":"ui/info.html","title":"系统信息","keywords":"","body":"登陆 本页面可以显示网关的基本负载信息，包括CPU，内存，磁盘，网络等，可以通过右上角的网关信息推送开关，选择是否将网关信息推送到云平台 "},"ui/collector.html":{"url":"ui/collector.html","title":"采集配置","keywords":"","body":"采集配置 列表页面可以看到所有自己的设备,其中ID为设备在本网关内部的唯一ID,API接口中会用到这个ID 可以对设备进行增删改查,对于FANUC和MITSUBISHI的设备,可以通过大屏幕查看,添加修改设备后,需要重启服务生效 大屏幕只支持1920*1080分辨率,若分辨率达不到,可以使用浏览器的缩放功能缩放到合适的大小 添加时首先选择设备类型 然后选择点位即可 本网关支持边缘计算,具体使用方法参照边缘计算 "},"ui/network.html":{"url":"ui/network.html","title":"网络配置","keywords":"","body":"网络配置 如图,根据不同硬件选配,网卡数量不同. 有线网卡可以配置DHCP(动态获取IP地址)或静态IP地址. 子网掩码表示方法为掩码长度,0-32位的数字,可以用子网掩码计算器计算 无线网络输入SSID和密码即可, 如果需要禁用无线网络,清空输入即可 所有网络修改完必须重启设备,否则不会生效 所有网卡的网络配置必须保证IP地址不在同一网段,包括DHCP获取的IP和手动配置的静态IP eth0 为 net0, eth1 为 net1 4G网络插卡断电重启即可, 无需配置 git "},"ui/gateway/":{"url":"ui/gateway/","title":"网关配置","keywords":"","body":"网关配置 网关信息和推送配置 "},"ui/gateway/info.html":{"url":"ui/gateway/info.html","title":"网关信息","keywords":"","body":"网关信息 此处可以配置网关ID,网关ID应该是唯一的,很多协议内部会使用网关ID作为推送标识 "},"ui/gateway/publisher.html":{"url":"ui/gateway/publisher.html","title":"推送配置","keywords":"","body":"网关推送 目前支持多种平台推送,其他协议如有需求,联系售后,可持续迭代添加,修改推送后,需要重启服务生效 协议文档 网关内置多种平台协议,通用MQTT为本公司定义的简易协议,文档参照巫迪协议 其他协议文档参考平台官网 自定义协议 简单的mqtt格式用户可以自己通过自定义MQTT协议适配 格式如下,完成方法定义即可 function init() config = {}; config.address = 'tcp://127.0.0.1:1883' config.interval = 30 config.client_id = 'test' global_config.topic = 'data/' .. global_config.gateway_id .. '/v1' return config end function gen_message(message) return message end function push_message(message) log(message) push(cjson.encode(message), global_config.topic) end function init_push(devices) end 反向控制 通用MQTT支持反向控制,具体控制方法参照API接口 "},"ui/debug/":{"url":"ui/debug/","title":"调试工具","keywords":"","body":"调试工具 提供一些基本的调试工具,可以用来查看网关状态,以及判断失败原因等 "},"ui/debug/tools.html":{"url":"ui/debug/tools.html","title":"调试命令","keywords":"","body":"调试工具 这里可以做一些简单的调试,包括了ping,ifconfig,route三条命令 ping返回大于0表示网络是通的,小于或等于0均表示网络不通 获取ip地址可以看到本机所以ip地址,其中 eth0为net0 eth1为net1 wlan0为WiFi,eth2为4G,tap0为VPN 路由为linux专业工具,需了解专业网络知识,可以查看当前网卡优先级别和路由状态 "},"ui/debug/log.html":{"url":"ui/debug/log.html","title":"实时日志","keywords":"","body":"实时日志 实时打印系统日志,注意,这个页面会无限获取日志,如果电脑性能不高,不要长时间待在这个页面 "},"ui/system/":{"url":"ui/system/","title":"系统设置","keywords":"","body":"系统设置 提供通用的系统设置功能 "},"ui/system/control.html":{"url":"ui/system/control.html","title":"系统控制","keywords":"","body":"设备控制 可以重启设备或重启服务,注意,重启设备需要一分钟左右, "},"ui/system/password.html":{"url":"ui/system/password.html","title":"修改密码","keywords":"","body":"密码设置 建议设置高强度密码,不要透漏给其他人 "},"ui/system/lisence.html":{"url":"ui/system/lisence.html","title":"授权设置","keywords":"","body":"授权设置 设备指纹为设备唯一编码,设备授权基于设备指纹,如需更新设备授权,请联系售后 可采集数量当all>0时,为可以采集任意型号,总数不大于all 当all=0时,为可采集以下任意设备,且采集的型号的总数不大于对应授权的数量 "},"vpn.html":{"url":"vpn.html","title":"VPN","keywords":"","body":"VPN 未授权 未授权情况下 用户只可选择是否启用VPN，启用VPN后可远程配置本网关，仅可以搭配本公司网关管理平台，关闭后，任何人将不能远程控制网关，对安全性有要求的公司，可以关闭VPN功能 已授权 VPN已授权后可以映射采集设备,使用自定义配置文件,以及使用桥接模式 巫云配置为本公司默认配置,可搭配本公司平台使用(推荐) 映射设备: 地址为欲通过VPN控制的机床设备的IP地址,请确保在调试页面可以ping通,支持TCP和UDP点对点协议,不支持UDP广播,如需映射设备,需要将设备的默认网关(Default Gateway,Fanuc中为路由器地址)设置为本网关的IP地址 桥接模式: 桥接模式启用后,VPN会转为交换机模式,所有连接在net1上的机床设备,与采集网关网关本身,与客户电脑的VPN网卡将处于同一虚拟交换机上.本方案适用于VPN批量机床设备,或者机床/PLC的控制协议非tcp协议的情况 巫云配置的密码为平台配置密码,需要与平台密码一致 使用方法 首先联系客服获取巫云平台账号 打开巫云管理平台https://custom.woody.vip并登陆 首页有配置文件和软件,请根据自己的平台选择使用 设备列表页面可以看到自己公司所有设备的状态,列表所示的IP地址即为采集网关的VPN IP地址,可以用这个地址管理网关 映射设备使用方法 采集网关的VPN页面将需要映射的设备的IP地址填入映射IP地址 需要被映射的设备的网络配置界面需要把Gateway设置为采集网关的ip地址 然后就可实现采集网关到设备的映射,此时在连接了VPN的电脑上可直接对采集网关的VPN IP做机床/PLC上下载功能,即相当于对机床/PLC本身的操作 桥接模式使用方法 在采集网关的VPN页面,将桥接模式置于打开模式,即可使用VPN桥接模式,此方案比较复杂,适用于映射方案无法解决问题的时候. 本方案的核心为,将机床/PLC与用户置于同一交换机,所以需要用户手动配置IP地址,使网络可达,网络配置方法如下(如果不需要配置IP地址,可以跳过,直接用相关软件进行广播扫描) 机床修改IP地址(推荐) 在设备列表页面,点击本次配置的网关的操作列,机床按钮,进入本网关的机床列表 填加机床后,会给机床分配一个机床IP,这个IP在全网内都是不冲突的,可以安全使用 点击IP地址,会出现完整的IP配置参数 在机床的网络界面将本页面展现的网络参数填入,最主要的两个参数为IP地址和子网掩码,其他参数可以不设置(如果不需要配置IP地址,本条可以跳过) 至此网络配置完成,如果配置了IP地址,可以直接操作机床 电脑修改IP地址 如果机床已有自己的网络地址,不方便修改,可以通过修改电脑IP达成一个子网的目的 在windows 网络中心找到VPN的网卡,驱动包含Tap字段 打开cmd(也许需要管理员权限) 输入以下命令netsh interface ip add address \"以太网卡名\" 192.168.x.x 255.255.255.0 将以太网卡名替换为上一步查到的名称,IP地址按照自己的规则修改 可能的问题 如果有多台网关同时开启了桥接模式,有可能会导致机床IP冲突 本方案填加的IP地址,会在VPN重连后丢失,每次重连需要重新配置 特殊网络拓扑 联系售后人员指导配置 注意事项 VPN可直接打通企业内网,如果对安全性要求很高,需谨慎操作 如需私有部署网关管理平台,请联系商务woody@woody.vip 由于VPN服务的数据流量会过服务器,必定会导致延迟过高,对于低延迟场景,避免使用VPN "},"woody_mqtt.html":{"url":"woody_mqtt.html","title":"巫迪MQTT","keywords":"","body":"巫迪协议 通用MQTT为网关默认推送协议,推送主题为data/{gateway_id}/v1,gateway_id为网关信息里的网关ID,推送格式如下 [ { \"device_id\": \"Test\", \"ts\": 1561994655032, \"device_type\": \"fanuc\", \"values\": [ { \"name\": \"cnc_products\", \"value\": 20559 }, { \"name\": \"cnc_type\", \"value\": \"FANUC 0i MF\" }, { \"name\": \"device_state\", \"value\": 0 }, { \"name\": \"cnc_mecpos\", \"value\": [ { \"axis\": \"X\", \"value\": -84.4 }, { \"axis\": \"Y\", \"value\": 2.986 }, { \"axis\": \"Z\", \"value\": -108.181 } ] }, { \"name\": \"cnc_alarm\", \"value\": [ { \"alarm_no\": 1, \"alarm_type\": \"T01\", \"alarm_msg\": \"待机中\" }, { \"alarm_no\": 204, \"alarm_type\": \"XXX\", \"alarm_msg\": \"急停\" } ] } ] } ] 订阅Demo Java import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import org.fusesource.mqtt.client.*; import java.lang.reflect.Type; import java.util.ArrayList; import java.util.concurrent.TimeUnit; class Alarm { public String alarm_type; public String alarm_msg; public int alarm_no; } class Position { public String axis; public Double value; } class Value { public String name; public Object value; } class Root { public String device_id; public long ts; public String device_type; public Value[] values; } public class JavaDemo { final static String TOPIC_NAME = \"data/+/v1\"; final static String IP = \"127.0.0.1\"; final static int PORT = 1883; public static void run() throws Exception { MQTT mqtt = new MQTT(); mqtt.setHost(IP, PORT); BlockingConnection connection = mqtt.blockingConnection(); connection.connect(); System.out.println(\"Connected to Broker!\"); Topic[] topics = {new Topic(TOPIC_NAME, QoS.EXACTLY_ONCE)}; connection.subscribe(topics); Type AlarmType = new TypeToken>() { }.getType(); Type PositionType = new TypeToken>() { }.getType(); while (true) { Message message = connection.receive(10, TimeUnit.SECONDS); if (message != null) { Type RooList = new TypeToken>() { }.getType(); ArrayList table = new Gson().fromJson(new String(message.getPayload()), RooList); for (Root tt : table) { System.out.println(tt.device_id); for (Value value : tt.values) { System.out.print(value.name + \"\\t\"); if (value.value instanceof java.util.ArrayList) { if (value.name.equals(\"cnc_alarm\")) { ArrayList alarms = new Gson().fromJson(value.value.toString(), AlarmType); for (Alarm alarm : alarms) { System.out.print(\"\\nalarm_no:\" + alarm.alarm_no + \"\\talarm_type:\" + alarm.alarm_type + \"\\talarm_msg:\" + alarm.alarm_msg); } } else { ArrayList position = new Gson().fromJson(value.value.toString(), PositionType); for (Position axis : position) { System.out.print(axis.axis + \":\" + axis.value + \"\\t\"); } } } else { System.out.print(value.value); } System.out.println(); } } message.ack(); } } } public static void main(String[] args) throws Exception { JavaDemo.run(); } } .Net core using System; using MQTTnet; using MQTTnet.Client; using MQTTnet.Client.Options; using System.Text; using System.Collections.Generic; namespace dotnet_demo { public class Position { public string axis { set; get; } public string value { set; get; } } public class Alarm { public int alarm_no { set; get; } public string alarm_type { set; get; } public string alarm_msg { set; get; } } public class Values { public string name { get; set; } public object value { get; set; } } public class Root { public string device_id { get; set; } public long ts { get; set; } public string device_type { get; set; } public List values { get; set; } } class Program { static void Main(string[] args) { string topicSubscribe = \"data/+/v1\"; MqttClient mqttClient = new MqttFactory().CreateMqttClient() as MqttClient; mqttClient.UseConnectedHandler(async handle => { var result = await mqttClient.SubscribeAsync(new MqttTopicFilter() { Topic = topicSubscribe, QualityOfServiceLevel = MQTTnet.Protocol.MqttQualityOfServiceLevel.AtLeastOnce }); }); mqttClient.UseApplicationMessageReceivedHandler(handle => { var payload = Encoding.Default.GetString(handle.ApplicationMessage.Payload); List table = Newtonsoft.Json.JsonConvert.DeserializeObject>(payload); foreach (var m in table) { foreach (var s in m.values) { Console.Write(s.name + \"\\t\"); if (typeof(Newtonsoft.Json.Linq.JArray) == s.value.GetType()) { if (s.name == \"cnc_alarm\") { List alarms = Newtonsoft.Json.JsonConvert.DeserializeObject>(s.value.ToString()); foreach (var alarm in alarms) { Console.WriteLine(\"\\nalarm_no:\" + alarm.alarm_no.ToString() + \"\\talarm_type:\" + alarm.alarm_type + \"\\talarm_msg:\" + alarm.alarm_msg); } } else { List pos = Newtonsoft.Json.JsonConvert.DeserializeObject>(s.value.ToString()); foreach (var axis in pos) { Console.Write(axis.axis + \":\" + axis.value.ToString() + \"\\t\"); } } } else { Console.Write(s.value); } Console.WriteLine(); } } }); var options = new MqttClientOptionsBuilder() .WithProtocolVersion(MQTTnet.Formatter.MqttProtocolVersion.V311) .WithClientId(Guid.NewGuid().ToString().Substring(0, 5)) .WithTcpServer(\"127.0.0.1\", 1883) .WithCleanSession() .Build(); mqttClient.ConnectAsync(options); Console.ReadKey(); } } } Python import json import paho.mqtt.client as mqtt def on_connect(mqtt_client, userdata, flags, rc): mqtt_client.subscribe('data/+/v1') def on_message(mqtt_client, userdata, msg): try: table = json.loads(msg.payload) for tt in table: print(tt.get('device_id')) for value in tt.get('values'): print(value.get('name'), end='\\t') data = value.get('value') if isinstance(data, list): if value.get('name') == 'cnc_alarm': for alarm in data: print( f'\\nalarm_no:{alarm.get(\"alarm_no\")}\\talarm_type:{alarm.get(\"alarm_type\")}\\talarm_msg:{alarm.get(\"alarm_msg\")}', end='') else: for axis in data: print(f'{axis.get(\"axis\")}:{axis.get(\"value\")}', end='\\t') else: print(data, end='') print('') except Exception as e: print(e) mqtt_client = mqtt.Client() mqtt_client.on_connect = on_connect mqtt_client.on_message = on_message mqtt_client.connect('127.0.0.1', 1883, 60) if __name__ == '__main__': mqtt_client.loop_forever() "},"api/":{"url":"api/","title":"API接口","keywords":"","body":"API 当前网关提供两种API接口 基于HTTP的Restful API可以用任何http客户端调用,缺点为只能内网访问,或借助VPN 基于MQTT的接口,需要程序适配,只要设备接入MQTT服务,即可远程控制,只支持通用MQTT "},"api/http.html":{"url":"api/http.html","title":"HTTP接口","keywords":"","body":"HTTP API BASEURL /api 登录 请求 Method: POST URL: /user/login Headers： Content-Type:application/json Body:{ \"username\" : \"admin\", \"password\" : \"password\" } 返回 200{ \"token\": \"uuid\" } 400 请求参数错误 410 密码错误 登出 请求 Method: DELETE URL: /user/login Headers： Content-Type:application/json JWT:{token} 返回 204 OK 401 未登录 获取用户信息 请求 Method: GET URL: /user/info Headers： Content-Type:application/json JWT:{token} 返回 200{ \"avatar\":\"\", \"name\":\"admin\" } 401 未登录 修改密码 请求 Method: POST URL: /user/change_password Headers： Content-Type:application/json JWT:{token} Body:{ \"password\" : \"password\", \"password2\" : \"password2\" } 返回 204 OK 400 请求参数错误 401 未登录 410 密码错误 设备列表 请求 Method: GET URL: /device Headers： Content-Type:application/json 返回 200[ { \"baud\": 9600, \"data_bits\": 8, \"did\": \"FanucTest112\", \"enable\": true, \"id\": 1, \"interval\": 1.0, \"ip\": \"192.168.1.1\", \"items\": [ { \"address\": \"\", \"address_type\": \"\", \"function_code\": 3, \"id\": 1, \"interval\": 1, \"item_name\": \"cnc_type\", \"size\": 0, \"sub_address\": 0, \"value_type\": 1 } ], \"model\": \"all\", \"parity\": \"N\", \"port\": 8193, \"protocol\": \"fanuc\", \"serial\": \"/dev/ttyO2\", \"slave_id\": 1, \"stop_bits\": 1, \"type\": \"fanuc\" } ] 添加设备 请求 Method: POST URL: /device Headers： Content-Type:application/json Body:{ \"baud\": 9600, \"data_bits\": 8, \"did\": \"FanucTest112\", \"enable\": true, \"interval\": 1.0, \"ip\": \"192.168.1.1\", \"items\": [ { \"address\": \"\", \"address_type\": \"\", \"function_code\": 3, \"id\": 1, \"interval\": 1, \"item_name\": \"cnc_type\", \"size\": 0, \"sub_address\": 0, \"value_type\": 1 } ], \"model\": \"all\", \"parity\": \"N\", \"port\": 8193, \"protocol\": \"fanuc\", \"serial\": \"/dev/ttyO2\", \"slave_id\": 1, \"stop_bits\": 1, \"type\": \"fanuc\" } 返回 201 填加OK 400 请求参数错误 409 授权数量不匹配 获取单个设备 请求 Method: GET URL: /device/{device_id} Headers： Content-Type:application/json 返回 200{ \"baud\": 9600, \"data_bits\": 8, \"did\": \"FanucTest112\", \"enable\": true, \"id\": 1, \"interval\": 1.0, \"ip\": \"192.168.1.1\", \"items\": [ { \"address\": \"\", \"address_type\": \"\", \"function_code\": 3, \"id\": 1, \"interval\": 1, \"item_name\": \"cnc_type\", \"size\": 0, \"sub_address\": 0, \"value_type\": 1 } ], \"model\": \"all\", \"parity\": \"N\", \"port\": 8193, \"protocol\": \"fanuc\", \"serial\": \"/dev/ttyO2\", \"slave_id\": 1, \"stop_bits\": 1, \"type\": \"fanuc\" } 404 未找到资源 修改设备 请求 Method: PUT URL: /device/{device_id} Headers： Content-Type:application/json Body:{ \"baud\": 9600, \"data_bits\": 8, \"did\": \"FanucTest112\", \"enable\": true, \"interval\": 1.0, \"ip\": \"192.168.1.1\", \"items\": [ { \"address\": \"\", \"address_type\": \"\", \"function_code\": 3, \"id\": 1, \"interval\": 1, \"item_name\": \"cnc_type\", \"size\": 0, \"sub_address\": 0, \"value_type\": 1 } ], \"model\": \"all\", \"parity\": \"N\", \"port\": 8193, \"protocol\": \"fanuc\", \"serial\": \"/dev/ttyO2\", \"slave_id\": 1, \"stop_bits\": 1, \"type\": \"fanuc\" } 返回 204 OK 400 请求参数错误 409 授权数量不匹配 404 未找到资源 删除设备 请求 Method: DELETE URL: /device/{device_id} Headers： Content-Type:application/json 返回 204 OK 404 未找到资源 获取设备采集数据 请求 Method: GET URL: /device/{device_id}/info Headers： Content-Type:application/json 返回 200{ \"cnc_respos\": { \"ts\": 1566384648053, \"value\": [ { \"axis\": \"X\", \"value\": 0.0 }, { \"axis\": \"Y\", \"value\": 0.0 }, { \"axis\": \"Z\", \"value\": 0.0 } ] }, \"cnc_type\": { \"ts\": 1566384649570, \"value\": \"FANUC 0i MF\" } } 404 未找到资源 通过设备名控制变量 请求 Method: PUT URL: /device/{device_name}/control_by_name Headers： Content-Type:application/json Body:{ \"key\": \"M100\", \"value\": 1, \"value_type\": 1 } 返回 204 OK 400 请求参数错误 409 失败 404 未找到资源 通过设备ID控制变量 请求 Method: PUT URL: /device/{device_id}/control_by_name Headers： Content-Type:application/json Body:{ \"key\": \"M100\", \"value\": 1, \"value_type\": 1 } 返回 204 OK 400 请求参数错误 409 失败 404 未找到资源 操作设备临时变量 请求 Method: PUT URL: /device/{device_id}/temp_value Headers： Content-Type:application/json Body:[ { \"key\": \"M100\", \"action\": \"get\", \"value\": 111, \"per\": 1 } ] key是变量名称 action是操作方式,get,set,delete value要写入的值,get,delete方法忽略 per指定要写入的区域,0 redis,1 sqlite redis变量重启失效,sqlite位持久保存 返回 204 OK 400 请求参数错误 409 失败 404 未找到资源 "},"api/mqtt.html":{"url":"api/mqtt.html","title":"MQTT接口","keywords":"","body":"MQTT API MQTT API是对HTTP的一层封装,但是基于MQTT的特性,需要将请求与返回分开 请求 topic为 control/{gateway_id}/v1 gateway_id为网关ID 请求报文为 { \"cmd_id\": \"uuid\", \"method\": \"PUT\", \"url\": \"/api/device/{device_name}/control_by_name\", \"data\": { \"key\": \"M100\", \"value\": 1, \"value_type\": 1 } } 其中 cmd_id为指令唯一编号,建议用uuid,返回主题的payload会与之匹配 url参考http api method 参考http api data 参考http api的request body,若无请求body,请用\"data\":null 返回 topic为 echo/{gateway_id}/v1 gateway_id为网关ID 每次发完control主题后,都会有echo 请求报文为 { \"cmd_id\": \"uuid\", \"msg\": \"OK\", \"ret\": 0 } 其中 cmd_id为指令唯一编号,与control中的cmd_id匹配 msg,请求返回值 ret 若请求成功,值为0,若失败,参考http api的http_statuscode "},"calc.html":{"url":"calc.html","title":"边缘计算","keywords":"","body":"边缘计算 本网关提供基础的边缘计算功能,边缘计算暂时支持每个变量的独立计算与单个设备所有变量同时参与计算两种 关于Lua语法,参见Lua 教程 单变量计算 规则 单个变量脚本支持两个输入参数,函数名必须为calc,参数变量名可以自行决定 function calc(current,last) --[[ current: 本次采集到的值,注意,此处的值有可能为数字,字符串,array,table等Lua数据类型,需要根据不同变量做判断 last: 上次采集到的值,如果为第一次采集则为空 return: 计算完返回的变量,可以为数字,array,table,字符串等 如果脚本错误,上报的数据为错误内容 ]] current=current+1 return current end 测试 如图,当前值输入脚本的第一个参数,上次值输入脚本的第二个参数,然后输入脚本,执行后,输出里即可得到return的值 注意,如果输入值为数字,则直接输入数字,如果输入值为字符串,则输入带引号的字符串,如果输入值为table,则输入json格式 配置 在采集配置编辑与添加页面,可以针对变量配置脚本,如下图,选择对应的变量,在脚本框输入经过测试的脚本即可 设备计算 规则 设备计算脚本支持一个输入参数,函数名必须为calc,参数变量名可以自行决定 function calc(value) --[[ value: 本次所有采集到的变量,格式为一个table,可以使用变量名取到值 return: 计算完返回的变量,建议使用以输入相同的数据结构输出,否则可能会导致推送失败 如果脚本错误,上报的数据内会增加一个为script_error的字段卖,内容为错误内容 ]] value.run_status=\"正常\" return value end 测试 如图,全局变量输入脚本的参数,然后输入脚本,执行后,输出里即可得到return的值 注意,输入为严格的json格式 配置 在采集配置编辑与添加页面,将测试过的脚本输入边缘计算框即可,如下图 内置方法 push_message(msg,topic) 通过现有mqtt配置推送消息 msg: 消息 topic:可选,默认为数据topic set_key(key,value,persistant) 写入缓存变量 key: 变量名 value: 值 persistant: 是否持久化,0存入redis,1存入sqlite del_key(key,persistant) 删除缓存变量 key: 变量名 persistant: 是否持久化,0存入redis,1存入sqlite get_key(key,persistant) 获取缓存变量 key: 变量名 persistant: 是否持久化,0存入redis,1存入sqlite return: 变量的值 示例 将某个变量结果+1 function calc(current,last) current=current+1 return current end 将某个变量结果 追加一个字符串 function calc(current,last) current=current .. \"woody\" return current end 联合两个变量计算出新的变量 function calc(value) if(value.cnc_runstatus==1 and #value.cnc_alarm>0) then value.custom=2 end return value end 删除某个变量 function calc(value) value.cnc_runstatus=nil return value end 将Alarm的Array[Object]展开成普通变量 { \"cnc_alarm\": [ { \"alarm_no\": 1, \"alarm_type\": \"T01\", \"alarm_msg\": \"待机中\" }, { \"alarm_no\": 204, \"alarm_type\": \"XXX\", \"alarm_msg\": \"急停\" } ] } 转换成 { \"cnc_alarm_1_msg\": \"待机中\", \"cnc_alarm_1_no\": 1, \"cnc_alarm_1_type\": \"T01\", \"cnc_alarm_2_msg\": \"急停\", \"cnc_alarm_2_no\": 204, \"cnc_alarm_2_type\": \"XXX\" } function calc(value) for i, v in ipairs(value.cnc_alarm) do value['cnc_alarm_' .. i .. '_msg'] = v.alarm_msg value['cnc_alarm_' .. i .. '_no'] = v.alarm_no value['cnc_alarm_' .. i .. '_type'] = v.alarm_type end value.cnc_alarm = nil return value end 将坐标的Array[Object]展开成普通变量 { \"cnc_mecpos\": [ { \"axis\": \"X\", \"value\": -84.4 }, { \"axis\": \"Y\", \"value\": 2.986 }, { \"axis\": \"Z\", \"value\": -108.181 } ] } 转换成 { \"cnc_mecpos_X\": -84.4, \"cnc_mecpos_Y\": 2.986, \"cnc_mecpos_Z\": -108.181 } function calc(value) for i, v in ipairs(value.cnc_mecpos) do value['cnc_mecpos_'..v.axis]=v.value end value.cnc_mecpos=nil return value end "},"dict.html":{"url":"dict.html","title":"数据字典","keywords":"","body":"数据字典 网关内部分数据字典 device_state { \"Online\":0, \"Offline\":1 } valuetype { \"Int16\": 1, \"Float\": 2, \"Bool\":3, \"Int32\":4, \"Int64\":5, \"Double\": 6, \"String\": 7, \"Int8\": 8 } Fanuc cnc_mode { \"Mdi\":0, \"Memory\":1, \"None\":2, \"Edit\":3, \"Handle\":4, \"Jog\":5, \"TeachinJog\":6, \"TeachinHandle\":7, \"Incfeed\":8, \"Reference\":9, \"Remote\":10, \"Other\":11 } cnc_runstatus { \"RESET\":0, \"STOP\":1, \"HOLD\":2, \"START\":3, \"MSTR\":4, \"Other\":5 } cnc_emer { \"NotEmergency\":0, \"Emergency\":1, \"Reset\":2, \"Wait\":3, \"Others\":4 } cnc_gcode { \"G01\":0, \"G02\":1, \"G03\":2, \"G04\":3, \"Others\":4 } Mitsubishi cnc_mode { \"JOG模式中\":0, \"手轮模式中\":1, \"增量模式中\":2, \"手动任意进给模式中\":3, \"参考点返回模式中\":4, \"自动初始设定模式中\":5, \"JOG手轮同时模式中\":6, \"Null1\":7, \"内存模式中\":8, \"纸带模式中\":9, \"在线运行模式中\":10, \"MDI模式中\":11, \"Null2\":12, \"Null3\":13, \"子系统控制I运行模式中\":14, \"Null4\":15 } cnc_runstatus { \"RESET\":0, \"STOP\":1, \"HOLD\":2, \"START\":3, \"Others\":4 } cnc_emer { \"NotEmergency\": 0, \"Emergency\": 1 } SiemensCNC cnc_mode { \"JOG\": 0, \"TEACHIN\":1, \"MDA\":2, \"AUTO\":3, \"REPOS\":4, \"REFPOINT\":5, \"VAR\":6, \"INC\":7, \"OTHER\":8 } cnc_runstatus { \"RESET\":0, \"STOP\":1, \"HOLD\":2, \"START\":3, \"SPENDLE_CW_CCW\":4, \"Others\":5 } Brother cnc_mode { \"MANU\":1, \"MDI\":1, \"MEM\":2, \"EDIT\":3, \"MANU+MDI\":4, \"MEM+EDIT\":5, } cnc_runstatus { \"电源关闭\":1, \"等待\":2, \"工作\":3, \"停止\":4, \"错误\":5, } "},"point_table/":{"url":"point_table/","title":"点位地址","keywords":"","body":"点位映射 除了PLC可以或部分CNC可以自己设置地址外,本程序内置了大部分常用的点位供用户选择 "},"point_table/fanuc.html":{"url":"point_table/fanuc.html","title":"Fanuc","keywords":"","body":"Fanuc点位地址 内置点位 点位名称 点位地址 描述 数据类型 加工零件数 cnc_products cnc生产件数 Number Do CNC的IP地址 cnc_ip CNC的IP地址 String 开机时间 cnc_alivetime 数控系统工作时间 秒 Number 运行时间 cnc_runtime 加工程序运行总时间 秒 Number 切削时间 cnc_cuttime 加工总时间 秒 Number 循环时间 cnc_cycletime 单次加工时间 秒 Number CNC型号 cnc_type 说明机床类型 String 当前刀具号 cnc_toolnum 当前加工主轴上的刀具编号 String 当前刀补编号 cnc_tooloffsetnum 当前加工刀具对应刀补号 String 执行的NC主程序号 cnc_mainproname cnc当前加工执行的主程序号 String 当前加工程序语句号 cnc_seq cnc当前执行程序内容的语句号 Number 当前加工程序内容 cnc_currentpro cnc当前执行程序/指定程序名称内容 String 当前所处操作模式 cnc_mode 操作面板操作模式对应的模式 Enum 是否急停 cnc_emer 设备是否处于急停状态 Boolean 绝对坐标 cnc_ablpos 编程前会指定一个原点，建立坐标系 List[Object] 机械坐标 cnc_mecpos 机床厂家设定的坐标系 List[Object] 相对坐标 cnc_relpos 在刀尖当前所在位置建立的坐标系 List[Object] 剩余坐标 cnc_respos 剩余坐标是G01的切削终点的距离 List[Object] CNC ID cnc_id CNC ID String 快速移动倍率 cnc_rapidfeed 操作面板上快速移动倍率旋钮对应数值 Number 主轴设定速度S cnc_setspeed 宏变量中程序运行时定义的设定主轴转速 Number 主轴实际转速S cnc_actspeed 加工中主轴实际转速 Number 进给设定转速S cnc_setfspeed 宏变量中程序运行时定义的进给主轴转速（矢量值） Number 进给实际转速S cnc_actfspeed 加工中进给轴实际转速矢量值 Number 主轴负载 cnc_sload 主轴负荷值 Number 进给轴负载 cnc_fload 各进给轴的负荷值 Number 主轴温度 cnc_stemper 主轴电机温度 Number 伺服温度 cnc_ftemper 伺服电机温度 List[Object] 主轴倍率 cnc_srate 操作面板主轴旋率对应的数值 Number 切削倍率 cnc_frate 操作面板上进给倍率旋钮对应数值 Number 加工状态 cnc_gcode 判断G0/G1或其他G代码加工状态或加工坐标系 String 当前所处运行模式 cnc_runstatus 当前设备运行状态 Enum 程序列表 cnc_programlist 程序列表 List[Object] 报警 cnc_alarm 报警 List[Object] 添加点位 变量类型 变量名示例 变量地址示例 数据类型 宏变量 macro1 100 Number 设备PLC plc1 G0012 Number 设备诊断 dia1 4000 Number/List[Object] 设备参数 pamar1 6217 Number/List[Object] 数据字典 cnc_mode { \"Mdi\":0, \"Memory\":1, \"None\":2, \"Edit\":3, \"Handle\":4, \"Jog\":5, \"TeachinJog\":6, \"TeachinHandle\":7, \"Incfeed\":8, \"Reference\":9, \"Remote\":10, \"Other\":11 } cnc_runstatus { \"RESET\":0, \"STOP\":1, \"HOLD\":2, \"START\":3, \"MSTR\":4, \"Other\":5 } cnc_emer { \"NotEmergency\":0, \"Emergency\":1, \"Reset\":2, \"Wait\":3, \"Others\":4 } cnc_gcode { \"G01\":0, \"G02\":1, \"G03\":2, \"G04\":3, \"Others\":4 } "},"point_table/mitsubishi.html":{"url":"point_table/mitsubishi.html","title":"Mitsubishi","keywords":"","body":"Mitsubishi 点位地址 内置点位 点位名称 点位地址 描述 数据类型 加工零件数 cnc_products cnc生产件数 Number CNC的IP地址 cnc_ip CNC的IP地址 String 系统日期 cnc_systemdate 数控系统工作时间 时 Number 系统时间 cnc_systemtime 加工程序运行总时间 秒 Number 开机时间 cnc_alivetime 数控系统工作时间 秒 Number 运行时间 cnc_runtime 加工程序运行总时间 秒 Number 切削时间 cnc_cuttime 加工总时间 秒 Number 循环时间 cnc_cycletime 单次加工时间 秒 Number CNC型号 cnc_type 说明机床类型 String 当前刀具号 cnc_toolnum 当前加工主轴上的刀具编号 String 当前刀补D编号 cnc_tooloffsetdnum 当前刀补D编号 String 当前刀补H编号 cnc_tooloffsethnum 当前刀补H编号 String 执行的NC主程序号 cnc_mainproname cnc当前加工执行的主程序号 String 当前加工程序语句号 cnc_seq cnc当前执行程序内容的语句号 Number 当前加工程序内容 cnc_currentpro cnc当前执行程序/指定程序名称内容 String 当前所处操作模式 cnc_mode 操作面板操作模式对应的模式 Enum 是否急停 cnc_emer 设备是否处于急停状态 Boolean 绝对坐标 cnc_ablpos 编程前会指定一个原点，建立坐标系 List[Object] 机械坐标 cnc_mecpos 机床厂家设定的坐标系 List[Object] 相对坐标 cnc_relpos 在刀尖当前所在位置建立的坐标系 List[Object] 剩余坐标 cnc_respos 剩余坐标是G01的切削终点的距离 List[Object] 快速移动倍率 cnc_rapidfeed 操作面板上快速移动倍率旋钮对应数值 Number 主轴设定速度S cnc_setspeed 宏变量中程序运行时定义的设定主轴转速 Number 主轴实际转速S cnc_actspeed 加工中主轴实际转速 Number 进给设定转速S cnc_setfspeed 宏变量中程序运行时定义的进给主轴转速（矢量值） Number 进给实际转速S cnc_actfspeed 加工中进给轴实际转速矢量值 Number 主轴负载 cnc_sload 主轴负荷值 Number 进给轴负载 cnc_fload 各进给轴的负荷值 Number 主轴倍率 cnc_srate 操作面板主轴旋率对应的数值 Number 切削倍率 cnc_frate 操作面板上进给倍率旋钮对应数值 Number 加工状态 cnc_gcode 判断G0/G1或其他G代码加工状态或加工坐标系 String 当前所处运行模式 cnc_runstatus 当前设备运行状态 Enum 报警 cnc_alarm 报警 List[Object] 添加点位 变量类型 变量名示例 变量地址示例 数据类型 宏变量 macro1 100 Number 设备PLC plc1 R0012 Number 数据字典 cnc_mode { \"JOG模式中\":0, \"手轮模式中\":1, \"增量模式中\":2, \"手动任意进给模式中\":3, \"参考点返回模式中\":4, \"自动初始设定模式中\":5, \"JOG手轮同时模式中\":6, \"Null1\":7, \"内存模式中\":8, \"纸带模式中\":9, \"在线运行模式中\":10, \"MDI模式中\":11, \"Null2\":12, \"Null3\":13, \"子系统控制I运行模式中\":14, \"Null4\":15 } cnc_runstatus { \"RESET\":0, \"STOP\":1, \"HOLD\":2, \"START\":3, \"Others\":4 } cnc_emer { \"NotEmergency\": 0, \"Emergency\": 1 } "},"point_table/siemens.html":{"url":"point_table/siemens.html","title":"Siemens","keywords":"","body":"Siemens CNC点位地址 内置点位 点位名称 点位地址 描述 数据类型 CNC ID cnc_id CNC ID String CNC型号 cnc_type 说明机床类型 String 软件版本 cnc_softver_version 软件版本 String CNC的IP地址 cnc_ip CNC的IP地址 String 报警 cnc_alarm 报警 List[Object] 是否急停 cnc_emer 设备是否处于急停状态 Boolean 执行的NC主程序号 cnc_mainproname cnc当前加工执行的主程序号 String 加工零件数 cnc_products cnc生产件数 Number 当前所处操作模式 cnc_mode 操作面板操作模式对应的模式 Enum 循环时间 cnc_cycletime 单次加工时间 秒 Number 当前刀具号 cnc_toolnum 当前加工主轴上的刀具编号 String 机械坐标 cnc_mecpos 机床厂家设定的坐标系 List[Object] 相对坐标 cnc_relpos 在刀尖当前所在位置建立的坐标系 List[Object] 剩余坐标 cnc_respos 剩余坐标是G01的切削终点的距离 List[Object] 主轴设定速度S cnc_setsspeed 宏变量中程序运行时定义的设定主轴转速 Number 主轴实际转速S cnc_actsspeed 加工中主轴实际转速 Number 进给设定转速S cnc_setfspeed 宏变量中程序运行时定义的进给主轴转速（矢量值） Number 进给实际转速S cnc_actfspeed 加工中进给轴实际转速矢量值 Number 主轴负载 cnc_sload 主轴负荷值 Number 进给轴负载 cnc_fload 各进给轴的负荷值 Number 当前所处运行模式 cnc_runstatus 当前设备运行状态 Enum 主轴倍率 cnc_srate 操作面板主轴旋率对应的数值 Number 切削倍率 cnc_frate 操作面板上进给倍率旋钮对应数值 Number 电机温度 cnc_temper 电机温度 Number 轴名称 cnc_axisname 轴名称 String 剩余时间 cnc_remtime 剩余时间 Number 母线电压 cnc_voltage 母线电压 Number 实际电流 cnc_current 实际电流 Number 刀具半径补偿编号 cnc_toolradiusnum 刀具半径补偿编号 Number 刀具长度补偿编号 cnc_toollengthnum 刀具长度补偿编号 Number 刀具X补偿 cnc_toollengthx 刀具X补偿 Number 刀具Z补偿 cnc_toollengthz 刀具Z补偿 Number 刀沿位置 cnc_tooledg 刀沿位置 Number 数据字典 cnc_mode { \"JOG\": 0, \"TEACHIN\":1, \"MDA\":2, \"AUTO\":3, \"REPOS\":4, \"REFPOINT\":5, \"VAR\":6, \"INC\":7, \"OTHER\":8 } cnc_runstatus { \"RESET\":0, \"STOP\":1, \"HOLD\":2, \"START\":3, \"SPENDLE_CW_CCW\":4, \"Others\":5 } "},"point_table/knd.html":{"url":"point_table/knd.html","title":"KND","keywords":"","body":"KND 点位地址 内置点位 点位名称 点位地址 描述 数据类型 加工零件数 cnc_products cnc生产件数 Number CNC的IP地址 cnc_ip CNC的IP地址 String CNC ID cnc_id CNC ID String CNC型号 cnc_type 说明机床类型 String 切削时间 cnc_cuttime 加工总时间 秒 Number 循环时间 cnc_cycletime 单次加工时间 秒 Number 开机时间 cnc_alivetime 数控系统工作时间 秒 Number 运行时间 cnc_runtime 加工程序运行总时间 秒 Number 绝对坐标 cnc_ablpos 编程前会指定一个原点，建立坐标系 List[Object] 机械坐标 cnc_mecpos 机床厂家设定的坐标系 List[Object] 相对坐标 cnc_relpos 在刀尖当前所在位置建立的坐标系 List[Object] 报警 cnc_alarm 报警 List[Object] 执行的NC主程序号 cnc_mainproname cnc当前加工执行的主程序号 String 快速移动倍率 cnc_rapidfeed 操作面板上快速移动倍率旋钮对应数值 Number 切削倍率 cnc_frate 操作面板上进给倍率旋钮对应数值 Number 当前所处运行模式 cnc_runstatus 当前设备运行状态 Enum 当前所处操作模式 cnc_mode 操作面板操作模式对应的模式 Enum 软件版本 cnc_softversion 软件版本 String FPGA版本 cnc_fpgaversion FPGA版本 String T型图版本 cnc_ladderversion T型图版本 String 是否就绪 cnc_isready 是否就绪 Boolean 未就绪原因 cnc_notreadyreason 未就绪原因 String 当前工件坐标系 cnc_curworkcoor 当前工件坐标系 String 当前系统坐标系 cnc_curworkcoorsystem 当前系统坐标系 String 手动切削倍率 cnc_jograte 手动切削倍率 Number ; "},"point_table/brother.html":{"url":"point_table/brother.html","title":"Brother","keywords":"","body":"Brother点位地址 内置点位 点位名称 点位地址 描述 数据类型 加工零件数 cnc_products cnc生产件数 Number 报警 cnc_alarm 报警 List[Object] 绝对坐标 cnc_ablpos 编程前会指定一个原点，建立坐标系 List[Object] 机械坐标 cnc_mecpos 机床厂家设定的坐标系 List[Object] 相对坐标 cnc_relpos 在刀尖当前所在位置建立的坐标系 List[Object] 剩余坐标 cnc_respos 剩余坐标是G01的切削终点的距离 List[Object] CNC版本 cnc_version CNC版本 String CNC的IP地址 cnc_ip CNC的IP地址 String CNC ID cnc_id CNC ID String 快速移动倍率 cnc_rapidfeed 操作面板上快速移动倍率旋钮对应数值 Number 切削倍率 cnc_frate 操作面板上进给倍率旋钮对应数值 Number 主轴倍率 cnc_srate 操作面板主轴旋率对应的数值 Number 当前刀具号 cnc_toolnum 当前加工主轴上的刀具编号 Number 主轴实际转速S cnc_actspeed 加工中主轴实际转速 Number 进给实际转速S cnc_actfspeed 加工中进给轴实际转速矢量值 Number 当前所处运行模式 cnc_runstatus 当前设备运行状态 Enum 当前所处操作模式 cnc_mode 操作面板操作模式对应的模式 Enum 执行的NC主程序号 cnc_mainproname cnc当前加工执行的主程序号 String CNC型号 cnc_type 说明机床类型 String 数据字典 cnc_mode { \"MANU\":1, \"MDI\":1, \"MEM\":2, \"EDIT\":3, \"MANU+MDI\":4, \"MEM+EDIT\":5, } cnc_runstatus { \"电源关闭\":1, \"等待\":2, \"工作\":3, \"停止\":4, \"错误\":5, } "},"modbus.html":{"url":"modbus.html","title":"Modbus Server","keywords":"","body":"Modbus输出 网关可以设置通过Modbus输出采集到的数据 modbus tcp的地址为网关地址,端口为502 操作方法 勾选需要输出到Modbus的变量 如果变量类型为空,需要手动调整变量类型 点击保存生成Modbus地址 可以导出为点位表 所有变量均存于保持寄存器 协议解释 所有的Int均为Int64长整形 浮点为Double双精度浮点型 字符串长度最大为100 Alarm类型为一个复杂类型,地址前4位为报警数量,后面每四位为一个报警的报警编号,数据类型为Int64,Alarm总长度为100位. 例如cnc_alarm的地址为40209: 40209读取Int64为报警数量 40413读取Int64为第一个报警的报警号 40417读取Int64为第二个报警的报警号 ..... Position类型为一个复杂类型,地址前4位为轴数,后面每八位为一个轴信息,每一个轴信息的前4位为轴名称,字符串类型,后四位为对应的值,Double类型,Position总长度为100位. 例如cnc_mecpos的地址为40109: 40109读取Int64为轴数量 40113读取String(4)为第一个轴名称 40117读取Double为第一个轴的值 40121读取String(4)为第二个轴名称 40125读取Double为第二个轴的值 .... "},"supported.html":{"url":"supported.html","title":"支持型号","keywords":"","body":"支持CNC型号列表 发那科(Fanuc) FANUC Series 0i-MODEL A FANUC Series 0i-MODEL B FANUC Series 0i-MODEL C Note1) FANUC Series 0i-MODEL D FANUC Series 0i Mate-MODEL D FANUC Series 0i-MODEL F FANUC Series 0i Mate-MODEL F FANUC Series 0i-PD FANUC Series 0i-PF FANUC Series 15/150-MODEL B FANUC Series 15i/150i-MODEL A FANUC Series 15i/150i-MODEL B FANUC Series 16/160-MODEL B FANUC Series 16/160-MODEL c FANUC Series 18/180-MODEL B FANUC Series 18/ 180-MODEL c FANUC Series 21/210-MODEL B FANUC Series 16/160i-MODEL A FANUC Series 18i/180i-MODEL A FANUC Series 21i/210i-MODEL A FANUC Series 16i/160i-MODEL B FANUC Series 18i/180i-MODEL B FANUC Series 21i/210i-MODEL B FANUC Series 16i/ 160i-P FANUC Series 18i/180i-P FANUC Series 16i/160i-L FANUC Series 16i/160i-W FANUC Series 18i/180i-W FANUC Series 30i-MODEL A FANUC Series 31i-MODEL A FANUC Series 32i-MODEL A FANUC Series 30i-MODEL B FANUC Series 31i-MODEL B FANUC Series 32i-MODEL B FANUC Series 35i-MODEL B FANUC Series 30i-P MODEL B FANUC Series 31i-P MODEL B FANUC Series 30i-L MODEL B FANUC Series 31i-L MODEL B FANUC Series 31i-W MODEL A FANUC Series 31i-W MODEL B FANUC Power Mate i-MODEL H FANUC Power Mate i-MODEL D FANUC Power Motion i-MODEL A 西门子(Siemens) 目前市面上的西门子系统主要有808d,810d,802dsl,828d,828dsl,840d,840dsl. 其中西门子官方支持828d,828dsl,840dsl, 且系统版本必须满足sw4.5 sp3. 西门子官方在该版本系统内置opcua server, 客户需向西门子官方购买opcua授权进行通讯数据采集, 每台费用在3000左右. 其余西门子CNC型号官方均不支持通讯数据读写. 巫迪科技针对西门子驱动器进行研究解析分析,实现了针对西门子驱动器的免授权数据读写，支持了驱动器具备网口的808d,802d,828d,82dsl,840dsl. 同时也支持了PCU版本在5.0的810d,840d系统, 支持X86,arm等硬件架构, 可以轻松的在任意平台移植, 满足工业网关的低成本高稳定的需求. siemens 808d siemens 810d siemens 802dsl siemens 828d siemens 828dsl siemens 840d(采集方式需要部署程序,有蓝屏风险,不建议采集但是可以采集) siemens 840dsl 三菱(Mitsubishi) Mitsubishi CNC M700系列 Mitsubishi CNC M700V系列 Mitsubishi CNC M70系列 Mitsubishi CNC M70V系列 Mitsubishi CNC E70系列 Mitsubishi CNC C70系列 Mitsubishi CNC M800系列 Mitsubishi CNC M80系列 哈斯(Hass) Hass CNC由于官方接口限制,只支持官方定义固定功能的宏程序打印.目前市面上的Hass CNC分为24针串口以及网口两种,均支持宏程序打印功能,支持X86,arm等硬件架构,可在任意平台移植,满足工业网关的低成本高稳定的需求. 支持所有24针串口以及网口版本 凯恩帝(knd) 支持系统版本信息V4.3以上的系统 海德汉(Heidenhain) Heidenhain 530 Heidenhain 640 力士乐(Boschrexroth)-测试阶段 支持自带网口全系列力士乐CNC 兄弟(Brother)-测试阶段 支持自带网口全系列Brother CNC 广州数控(GSK) GSK 988 GSK 980tdi GSK 980mdi GSK 980mdc GSK 980tdc GSK 25i 支持PLC型号列表 ModBus 支持标准ModBus协议,支持TCP和RTU两种模式. 西门子(Siemens) Siemens Smart200/300/400/1200/1500 三菱(Mitsubishi) Mitsubishi Fx系列/Q系列/A系列 欧姆龙(Omron) Omron CH系列 "},"faq.html":{"url":"faq.html","title":"常见问题","keywords":"","body":"常见问题 为什么我访问不了网关页面? 测试一下网络是否可达,在您的主机上ping网关地址,如果地址不通,您需要配置电脑ip使电脑与网关在同一网段,如果能ping通,请联系售后 忘记网关地址怎么办? 断开所有有线连接,插入4G卡,在巫云网关管理平台通过VPN访问 为什么采集不到数据? 检测设备地址是否正确 在调试页面ping设备地址看是否可达 "}}